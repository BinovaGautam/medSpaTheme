{
  "workflowStateManager": {
    "version": "1.0.0",
    "description": "Central state management for all active workflows",
    "lastStateUpdate": 1,
    "totalActiveWorkflows": 0,
    "stateUpdateSequence": 1
  },

  "activeWorkflows": {
    "example": {
      "workflowId": "WORKFLOW-TGC-001-INSTANCE-001",
      "workflowType": "tech-garbage-collection",
      "status": "running",
      "currentStage": "STAGE-002",
      "currentAgent": "critical-reviewer",
      "sequenceNumber": 1,
      "startedAtSequence": 1,
      "priority": "medium",
      "humanRequestId": "REQ-001",
      "context": {
        "sourceCode": "reference-to-code-location",
        "requirements": "TASK-ARCH-001-01",
        "previousStageOutputs": {
          "STAGE-001": {
            "sourceCode": "generated-code-location",
            "unitTests": "test-suite-location",
            "documentation": "docs-location",
            "confidenceScore": 0.85,
            "complexityMetrics": "metrics-data"
          }
        }
      },
      "progressTracking": {
        "stagesCompleted": ["STAGE-001"],
        "stagesRemaining": ["STAGE-002", "STAGE-003", "STAGE-004"],
        "qualityGatesPassed": ["syntaxValidation", "standardCompliance", "testCoverage"],
        "qualityGatesFailed": [],
        "retryCount": 0,
        "escalationLevel": "none"
      },
      "resourceAllocation": {
        "assignedAgents": ["code-generator", "critical-reviewer"],
        "resourcePriority": "standard-queue",
        "lockHeld": ["source-code-base"],
        "estimatedCompletion": "sequence-plus-3"
      },
      "handoffData": {
        "pendingHandoff": false,
        "nextAgent": "garbage-cleaner",
        "handoffTrigger": "review-failed",
        "handoffPayload": {
          "reviewReport": "pending",
          "improvementSuggestions": "pending"
        }
      }
    }
  },

  "workflowQueue": {
    "pendingWorkflows": [],
    "completedWorkflows": [],
    "failedWorkflows": [],
    "queuedForResources": []
  },

  "stateOperations": {
    "createWorkflow": {
      "operation": "add-new-workflow-to-active",
      "requiredFields": ["workflowId", "workflowType", "currentStage", "currentAgent"],
      "validation": ["unique-workflow-id", "valid-workflow-type", "agent-availability"]
    },
    "updateStage": {
      "operation": "advance-workflow-to-next-stage",
      "requiredFields": ["workflowId", "newStage", "newAgent"],
      "validation": ["workflow-exists", "valid-stage-transition", "agent-available"]
    },
    "completeWorkflow": {
      "operation": "move-workflow-to-completed",
      "requiredFields": ["workflowId", "completionStatus"],
      "validation": ["workflow-exists", "valid-completion-status"]
    },
    "failWorkflow": {
      "operation": "move-workflow-to-failed-with-reason",
      "requiredFields": ["workflowId", "failureReason"],
      "validation": ["workflow-exists", "valid-failure-reason"]
    },
    "retryWorkflow": {
      "operation": "reset-workflow-stage-with-retry-increment",
      "requiredFields": ["workflowId", "retryStage"],
      "validation": ["workflow-exists", "retry-limit-not-exceeded"]
    }
  },

  "stateValidation": {
    "consistency-checks": {
      "workflow-agent-alignment": "Ensure assigned agent matches current stage requirements",
      "resource-lock-integrity": "Verify locked resources are still needed",
      "handoff-readiness": "Validate handoff data is complete before transitions",
      "queue-ordering": "Maintain priority-based queue ordering"
    },
    "integrity-rules": {
      "unique-workflow-ids": "No duplicate workflow IDs allowed",
      "valid-state-transitions": "Only allow valid stage progressions",
      "resource-availability": "Don't assign unavailable agents",
      "completion-requirements": "All stages must complete before workflow completion"
    }
  },

  "emergencyProcedures": {
    "workflow-recovery": {
      "stuck-workflow": "Reset to last successful checkpoint",
      "agent-failure": "Reassign to available agent of same type",
      "resource-deadlock": "Release locks and restart affected workflows",
      "state-corruption": "Restore from latest valid snapshot"
    },
    "rollback-procedures": {
      "stage-rollback": "Return workflow to previous successful stage",
      "workflow-rollback": "Restart entire workflow from beginning",
      "system-rollback": "Restore entire state from checkpoint"
    }
  }
}
