/**
 * Design System Foundation - Tokenization-Aware Mixins
 *
 * Comprehensive mixin library for creating tokenization-aware components
 * Automatic contrast calculation, accessibility compliance, and modern CSS patterns
 *
 * @package MedSpaTheme
 * @version 3.0.0 - Sprint 3 Design System Foundation
 */

/* ==========================================================================
   CORE TOKENIZATION MIXINS
   ========================================================================== */

/**
 * Base Tokenization-Aware Component Mixin
 *
 * Makes any component automatically inherit design tokens with proper fallbacks
 * Includes accessibility features, focus states, and responsive behavior
 */
@mixin tokenization-aware-component($component-type: 'generic') {
  // Automatic color inheritance with component-specific overrides
  color: var(--component-text-color, var(--color-text-primary));
  background-color: var(--component-bg-color, var(--color-surface));
  border-color: var(--component-border-color, var(--color-border));

  // Component-specific token inheritance
  @if $component-type == 'button' {
    padding: var(--button-padding-y) var(--button-padding-x);
    border-radius: var(--button-border-radius);
    font-weight: var(--button-font-weight);
    font-size: var(--button-font-size);
    line-height: var(--button-line-height);
    transition: var(--button-transition);
  } @else if $component-type == 'card' {
    padding: var(--card-padding);
    border-radius: var(--card-border-radius);
    box-shadow: var(--card-shadow);
    transition: var(--card-transition);
  } @else if $component-type == 'form-input' {
    padding: var(--form-input-padding-y) var(--form-input-padding-x);
    border-radius: var(--form-input-border-radius);
    font-size: var(--form-input-font-size);
    line-height: var(--form-input-line-height);
    transition: var(--form-input-transition);
  }

  // Automatic focus state with accessibility compliance
  &:focus-visible {
    outline: none;
    box-shadow: var(--focus-ring-shadow);
  }

  // High contrast mode support
  @media (prefers-contrast: high) {
    border-width: var(--high-contrast-border, 2px);
  }

  // Reduced motion support
  @media (prefers-reduced-motion: reduce) {
    transition: none;
  }
}

/**
 * Component Variant System Mixin
 *
 * Creates consistent variant patterns for buttons, cards, and other components
 * Supports primary, secondary, accent, outline, and custom variants
 */
@mixin component-variant($variant: 'primary', $component-type: 'button') {
  @if $variant == 'primary' {
    --component-bg-color: var(--color-primary);
    --component-text-color: var(--color-primary-contrast);
    --component-border-color: var(--color-primary);

    &:hover {
      --component-bg-color: var(--color-primary-hover);
      --component-border-color: var(--color-primary-hover);
    }
  } @else if $variant == 'secondary' {
    --component-bg-color: var(--color-secondary);
    --component-text-color: var(--color-secondary-contrast);
    --component-border-color: var(--color-secondary);

    &:hover {
      --component-bg-color: var(--color-secondary-hover);
      --component-border-color: var(--color-secondary-hover);
    }
  } @else if $variant == 'accent' {
    --component-bg-color: var(--color-accent);
    --component-text-color: var(--color-accent-contrast);
    --component-border-color: var(--color-accent);

    &:hover {
      --component-bg-color: var(--color-accent-hover);
      --component-border-color: var(--color-accent-hover);
    }
  } @else if $variant == 'outline' {
    --component-bg-color: transparent;
    --component-text-color: var(--color-primary);
    --component-border-color: var(--color-primary);

    &:hover {
      --component-bg-color: var(--color-primary);
      --component-text-color: var(--color-primary-contrast);
    }
  } @else if $variant == 'ghost' {
    --component-bg-color: transparent;
    --component-text-color: var(--color-text-primary);
    --component-border-color: transparent;

    &:hover {
      --component-bg-color: var(--color-surface-secondary);
    }
  } @else if $variant == 'surface' {
    --component-bg-color: var(--color-surface);
    --component-text-color: var(--color-text-primary);
    --component-border-color: var(--color-border);

    &:hover {
      --component-bg-color: var(--color-surface-secondary);
    }
  }

  // State variants
  &.success {
    --component-bg-color: var(--color-success);
    --component-text-color: white;
    --component-border-color: var(--color-success);
  }

  &.warning {
    --component-bg-color: var(--color-warning);
    --component-text-color: white;
    --component-border-color: var(--color-warning);
  }

  &.error {
    --component-bg-color: var(--color-error);
    --component-text-color: white;
    --component-border-color: var(--color-error);
  }

  &.info {
    --component-bg-color: var(--color-info);
    --component-text-color: white;
    --component-border-color: var(--color-info);
  }
}

/**
 * Automatic Contrast Calculation Mixin
 *
 * Intelligently calculates and applies contrast-compliant colors
 * Ensures WCAG AA compliance automatically
 */
@mixin auto-contrast($bg-color: null, $contrast-ratio: 4.5) {
  @if $bg-color {
    background-color: #{$bg-color};

    // Calculate appropriate text color based on background
    // This is a simplified approach - real implementation would use color functions
    @if lightness($bg-color) > 50% {
      color: var(--color-text-primary);
      --component-text-color: var(--color-text-primary);
    } @else {
      color: var(--color-text-inverse);
      --component-text-color: var(--color-text-inverse);
    }
  } @else {
    // Use token-based contrast
    background-color: var(--component-bg-color, var(--color-surface));
    color: var(--component-text-color, var(--color-text-primary));
  }
}

/* ==========================================================================
   LAYOUT & SPACING MIXINS
   ========================================================================== */

/**
 * Responsive Container Mixin
 *
 * Creates consistent container patterns with automatic token inheritance
 */
@mixin container($max-width: null, $padding: null) {
  width: 100%;
  max-width: #{$max-width or var(--container-max-width)};
  margin-left: auto;
  margin-right: auto;
  padding-left: #{$padding or var(--container-padding-x)};
  padding-right: #{$padding or var(--container-padding-x)};
}

/**
 * Flexible Grid System Mixin
 *
 * Modern CSS Grid system with token-aware spacing
 */
@mixin grid($columns: 1, $gap: null, $responsive: true) {
  display: grid;
  grid-template-columns: repeat(#{$columns}, 1fr);
  gap: #{$gap or var(--space-6)};

  @if $responsive {
    @media (max-width: 768px) {
      grid-template-columns: 1fr;
      gap: #{$gap or var(--space-4)};
    }
  }
}

/**
 * Flexbox Utilities Mixin
 *
 * Common flexbox patterns with token-aware spacing
 */
@mixin flex($direction: row, $align: center, $justify: flex-start, $gap: null) {
  display: flex;
  flex-direction: #{$direction};
  align-items: #{$align};
  justify-content: #{$justify};
  gap: #{$gap or var(--space-4)};
}

/**
 * Spacing Utility Mixin
 *
 * Consistent spacing patterns using design tokens
 */
@mixin spacing($property, $size, $sides: all) {
  @if $sides == 'all' {
    #{$property}: var(--space-#{$size});
  } @else if $sides == 'x' {
    #{$property}-left: var(--space-#{$size});
    #{$property}-right: var(--space-#{$size});
  } @else if $sides == 'y' {
    #{$property}-top: var(--space-#{$size});
    #{$property}-bottom: var(--space-#{$size});
  } @else if $sides == 'top' {
    #{$property}-top: var(--space-#{$size});
  } @else if $sides == 'right' {
    #{$property}-right: var(--space-#{$size});
  } @else if $sides == 'bottom' {
    #{$property}-bottom: var(--space-#{$size});
  } @else if $sides == 'left' {
    #{$property}-left: var(--space-#{$size});
  }
}

/* ==========================================================================
   TYPOGRAPHY MIXINS
   ========================================================================== */

/**
 * Typography Scale Mixin
 *
 * Consistent typography patterns with automatic token inheritance
 */
@mixin typography($scale: 'base', $weight: null, $family: null) {
  font-size: var(--text-#{$scale});

  @if $weight {
    font-weight: var(--font-weight-#{$weight});
  }

  @if $family {
    font-family: var(--font-family-#{$family});
  } @else {
    font-family: var(--font-family-secondary);
  }

  // Automatic line height based on scale
  @if $scale == 'xs' or $scale == 'sm' {
    line-height: var(--leading-tight);
  } @else if $scale == '3xl' or $scale == '4xl' or $scale == '5xl' or $scale == '6xl' or $scale == '7xl' {
    line-height: var(--leading-tight);
  } @else {
    line-height: var(--leading-normal);
  }
}

/**
 * Heading System Mixin
 *
 * Consistent heading patterns across all components
 */
@mixin heading($level: 1) {
  font-family: var(--font-family-primary);
  font-weight: var(--font-weight-bold);
  color: var(--color-text-primary);

  @if $level == 1 {
    font-size: var(--text-5xl);
    line-height: var(--leading-tight);

    @media (max-width: 768px) {
      font-size: var(--text-3xl);
    }
  } @else if $level == 2 {
    font-size: var(--text-4xl);
    line-height: var(--leading-tight);

    @media (max-width: 768px) {
      font-size: var(--text-2xl);
    }
  } @else if $level == 3 {
    font-size: var(--text-3xl);
    line-height: var(--leading-snug);

    @media (max-width: 768px) {
      font-size: var(--text-xl);
    }
  } @else if $level == 4 {
    font-size: var(--text-2xl);
    line-height: var(--leading-snug);
  } @else if $level == 5 {
    font-size: var(--text-xl);
    line-height: var(--leading-snug);
  } @else if $level == 6 {
    font-size: var(--text-lg);
    line-height: var(--leading-normal);
  }
}

/* ==========================================================================
   INTERACTIVE ELEMENT MIXINS
   ========================================================================== */

/**
 * Button Base Mixin
 *
 * Complete button foundation with tokenization awareness
 */
@mixin button-base {
  @include tokenization-aware-component('button');

  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: var(--space-2);
  border: var(--button-border-width) solid transparent;
  cursor: pointer;
  text-decoration: none;
  text-align: center;
  user-select: none;
  vertical-align: middle;
  white-space: nowrap;

  // Disabled state
  &:disabled,
  &[aria-disabled="true"] {
    opacity: 0.5;
    cursor: not-allowed;
    pointer-events: none;
  }

  // Loading state
  &[data-loading="true"] {
    cursor: wait;
    opacity: 0.8;
  }
}

/**
 * Button Size Variants Mixin
 */
@mixin button-size($size: 'base') {
  @if $size == 'sm' {
    padding: var(--button-padding-y-sm) var(--button-padding-x-sm);
    font-size: var(--text-sm);
    gap: var(--space-1-5);
  } @else if $size == 'lg' {
    padding: var(--button-padding-y-lg) var(--button-padding-x-lg);
    font-size: var(--text-lg);
    gap: var(--space-3);
  } @else {
    padding: var(--button-padding-y) var(--button-padding-x);
    font-size: var(--button-font-size);
    gap: var(--space-2);
  }
}

/**
 * Form Input Base Mixin
 *
 * Complete form input foundation with tokenization awareness
 */
@mixin form-input-base {
  @include tokenization-aware-component('form-input');

  width: 100%;
  border: var(--form-input-border-width) solid var(--component-border-color);
  appearance: none;

  &::placeholder {
    color: var(--color-text-muted);
    opacity: 1;
  }

  &:focus {
    outline: none;
    --component-border-color: var(--color-border-focus);
    box-shadow: 0 0 0 3px rgba(var(--color-primary-rgb), 0.1);
  }

  &:invalid {
    --component-border-color: var(--color-error);
  }

  &:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    background-color: var(--color-surface-secondary);
  }
}

/**
 * Card Base Mixin
 *
 * Complete card foundation with tokenization awareness
 */
@mixin card-base {
  @include tokenization-aware-component('card');

  border: var(--card-border-width) solid var(--component-border-color);
  overflow: hidden;

  &:hover {
    box-shadow: var(--card-shadow-hover);
    transform: translateY(-1px);
  }
}

/* ==========================================================================
   ACCESSIBILITY MIXINS
   ========================================================================== */

/**
 * Screen Reader Only Mixin
 *
 * Hides content visually but keeps it available for screen readers
 */
@mixin sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

/**
 * Focus Management Mixin
 *
 * Consistent focus management across all interactive elements
 */
@mixin focus-management($offset: 2px) {
  &:focus {
    outline: none;
  }

  &:focus-visible {
    outline: var(--focus-ring-width) solid var(--focus-ring-color);
    outline-offset: #{$offset};
    box-shadow: var(--focus-ring-shadow);
  }
}

/**
 * High Contrast Mode Mixin
 *
 * Ensures components work properly in high contrast mode
 */
@mixin high-contrast-support {
  @media (prefers-contrast: high) {
    border: var(--high-contrast-border);
    box-shadow: none;

    &:focus-visible {
      outline: var(--high-contrast-outline);
    }
  }
}

/* ==========================================================================
   MEDICAL SPA SPECIFIC MIXINS
   ========================================================================== */

/**
 * Treatment Category Styling Mixin
 *
 * Applies category-specific styling for medical spa treatments
 */
@mixin treatment-category($category: 'general') {
  @if $category == 'facial' {
    --component-accent-color: var(--treatment-facial);
  } @else if $category == 'body' {
    --component-accent-color: var(--treatment-body);
  } @else if $category == 'laser' {
    --component-accent-color: var(--treatment-laser);
  } @else if $category == 'injectable' {
    --component-accent-color: var(--treatment-injectable);
  } @else if $category == 'skin' {
    --component-accent-color: var(--treatment-skin);
  } @else {
    --component-accent-color: var(--color-primary);
  }

  border-left: 4px solid var(--component-accent-color);
}

/**
 * Professional Trust Styling Mixin
 *
 * Applies trust-building visual elements for medical spa context
 */
@mixin professional-trust($type: 'certification') {
  @if $type == 'certification' {
    --trust-color: var(--trust-certification);
  } @else if $type == 'safety' {
    --trust-color: var(--trust-safety);
  } @else if $type == 'luxury' {
    --trust-color: var(--trust-luxury);
  } @else if $type == 'technology' {
    --trust-color: var(--trust-technology);
  }

  &::before {
    content: '';
    display: inline-block;
    width: 8px;
    height: 8px;
    background-color: var(--trust-color);
    border-radius: 50%;
    margin-right: var(--space-2);
  }
}

/* ==========================================================================
   UTILITY MIXINS
   ========================================================================== */

/**
 * Truncate Text Mixin
 */
@mixin truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

/**
 * Multi-line Truncate Mixin
 */
@mixin line-clamp($lines: 3) {
  display: -webkit-box;
  -webkit-line-clamp: #{$lines};
  -webkit-box-orient: vertical;
  overflow: hidden;
}

/**
 * Aspect Ratio Mixin
 */
@mixin aspect-ratio($ratio: 16/9) {
  aspect-ratio: #{$ratio};

  // Fallback for older browsers
  @supports not (aspect-ratio: 1) {
    position: relative;

    &::before {
      content: '';
      display: block;
      padding-top: #{(1 / $ratio) * 100%};
    }

    > * {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
    }
  }
}

/**
 * Clear Fix Mixin
 */
@mixin clearfix {
  &::after {
    content: '';
    display: table;
    clear: both;
  }
}

/* ==========================================================================
   END OF MIXIN LIBRARY
   ========================================================================== */
