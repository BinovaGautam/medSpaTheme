{
  "workflowRegistry": {
    "version": "1.3.0",
    "totalWorkflows": 13,
    "activeWorkflows": 13,
    "systemArchitecture": "hierarchical-workflow-orchestration-with-compliance-monitoring"
  },

  "workflowHierarchy": {
    "baseWorkflow": {
      "workflowId": "BASE-IO-001",
      "name": "base-input-output-workflow",
      "type": "foundational-orchestrator",
      "description": "Core orchestration workflow that routes all inputs to specialized workflows",
      "priority": 1,
      "status": "active",
      "location": "levCompiler/.control/workflows/base_input_output_workflow.json"
    },

    "specializedWorkflows": {
      "projectAnalysisWorkflow": {
        "workflowId": "PROJECT-ANALYSIS-WF-001",
        "name": "project-analysis-workflow",
        "type": "project-discovery-and-integration",
        "description": "Comprehensive analysis of existing projects for levCompiler integration",
        "priority": 1,
        "status": "active",
        "triggerPatterns": ["analyze", "analyze project", "existing project", "integration", "understand project", "project context"],
        "parentWorkflow": "base-input-output-workflow",
        "location": "levCompiler/.control/workflows/project_analysis_workflow.json"
      },

      "projectSetupWorkflow": {
        "workflowId": "PROJECT-SETUP-WF-001",
        "name": "project-setup-workflow",
        "type": "foundational-setup",
        "description": "Complete project setup from requirements to configured environment",
        "priority": 1,
        "status": "active",
        "triggerPatterns": ["setup", "initialize", "create project", "new project", "bootstrap"],
        "parentWorkflow": "base-input-output-workflow",
        "location": "levCompiler/.control/workflows/project_setup_workflow.json"
      },

      "codeGenerationWorkflow": {
        "workflowId": "CODE-GEN-WF-001",
        "name": "code-generation-workflow",
        "type": "specialized-development",
        "description": "Complete code generation from requirements to delivery",
        "priority": 2,
        "status": "active",
        "triggerPatterns": ["create", "build", "implement", "generate", "write code"],
        "parentWorkflow": "base-input-output-workflow",
        "location": "levCompiler/.control/workflows/code_generation_workflow.json"
      },

      "visualDevelopmentWorkflow": {
        "workflowId": "VISUAL-DEV-WF-001",
        "name": "visual-development-workflow",
        "type": "specialized-visual-development",
        "description": "Visual design to functional code workflow",
        "priority": 2,
        "status": "active",
        "triggerPatterns": ["visual", "ui", "design", "mockup", "wireframe"],
        "parentWorkflow": "base-input-output-workflow",
        "location": "levCompiler/.control/workflows/visual_development_workflow.json"
      },

      "uiUxCreationWorkflow": {
        "workflowId": "UI-UX-CREATION-WF-001",
        "name": "ui-ux-creation-workflow",
        "type": "specialized-design-development",
        "description": "Complete workflow for creating, managing, and implementing premium medical spa UI/UX designs using UI-UX Design Agent",
        "priority": 2,
        "status": "active",
        "triggerPatterns": ["ui design", "ux design", "create designs", "design system", "wireframes", "user interface", "user experience"],
        "parentWorkflow": "base-input-output-workflow",
        "location": "levCompiler/.control/workflows/ui_ux_creation_workflow.json",
        "primaryAgent": "UI-UX-DESIGN-001",
        "fileManagement": {
          "outputLocation": "levCompiler/project_context/designs/",
          "indexRegistration": "levCompiler/project_context/designs/index.json",
          "archiveLocation": "levCompiler/project_context/archive/designs/"
        }
      },

      "luxuryMedicalSpaDesignWorkflow": {
        "workflowId": "LUXURY-MEDSPA-DESIGN-WF-001",
        "name": "luxury-medical-spa-design-workflow",
        "type": "luxury-brand-design-orchestration",
        "description": "Complete workflow for creating luxury medical spa UI/UX designs with guaranteed consistency across all deliverables using UI/UX Design Agent with luxury positioning compliance",
        "priority": 1,
        "status": "active",
        "triggerPatterns": ["luxury design", "medical spa design", "premium ui", "brand consistency", "luxury medical spa", "sophisticated design", "consultation focused design"],
        "parentWorkflow": "ui-ux-creation-workflow",
        "location": "levCompiler/.control/workflows/luxury_medical_spa_design_workflow.json",
        "primaryAgent": "UI-UX-DESIGN-001",
        "specialization": "luxury-medical-spa-interface-design",
        "brandCompliance": "mandatory",
        "designApproach": "luxury-medical-spa-positioning",
        "fileManagement": {
          "outputLocation": "levCompiler/project_context/designs/",
          "indexRegistration": "levCompiler/project_context/designs/index.json",
          "archiveLocation": "levCompiler/project_context/archive/designs/",
          "designSystemReference": "levCompiler/project_context/designs/DESIGN_SYSTEM_OVERVIEW.md"
        },
        "qualityGates": {
          "brandConsistency": 1.0,
          "luxuryPositioning": 0.98,
          "ecommercePatternElimination": 1.0,
          "crossPageConsistency": 0.98,
          "accessibilityCompliance": 1.0
        }
      },

      "taskManagementWorkflow": {
        "workflowId": "TASK-MANAGEMENT-WF-001",
        "name": "task-management-workflow",
        "type": "specialized-project-management",
        "description": "Comprehensive workflow for project management, task planning, sprint execution, and stakeholder coordination using TASK-PLANNER-001",
        "priority": 1,
        "status": "active",
        "triggerPatterns": ["create tasks", "plan sprint", "manage project", "track bugs", "generate reports", "project planning", "scrum master", "epic management", "task breakdown", "progress tracking"],
        "parentWorkflow": "base-input-output-workflow",
        "location": "levCompiler/.control/workflows/task_management_workflow.json",
        "primaryAgent": "TASK-PLANNER-001",
        "fileManagement": {
          "outputLocation": "levCompiler/project_context/tasks/",
          "indexRegistration": "levCompiler/project_context/tasks/index.json",
          "archiveLocation": "levCompiler/project_context/archive/tasks/"
        }
      },

      "bugResolutionWorkflow": {
        "workflowId": "BUG-RESOLUTION-WF-001",
        "name": "bug-resolution-workflow",
        "type": "specialized-debugging-and-resolution",
        "description": "Comprehensive bug resolution workflow with DevKinsta specialization, systematic debugging methodology, and proper delegation to CODE-GEN-WF-001 for implementation",
        "priority": 2,
        "status": "active",
        "triggerPatterns": ["bug", "issue", "problem", "error", "fix", "debug", "troubleshoot", "malfunction", "not working"],
        "parentWorkflow": "base-input-output-workflow",
        "location": "levCompiler/.control/workflows/bug_resolution_workflow.json",
        "primaryAgent": "BUG-RESOLVER-001",
        "workflowDelegations": {
          "codeGeneration": "CODE-GEN-WF-001",
          "toolCreation": "CODE-GEN-WF-001",
          "devToolsManagement": "DEVTOOLS-ORG-WF-001"
        },
        "devToolsManagement": {
          "outputLocation": "devtools/",
          "toolCategories": ["wp-admin-tools", "standalone-scripts", "automated-checks", "dev-utilities"],
          "documentationRequirement": "each-tool-must-include-readme",
          "delegatedWorkflow": "DEVTOOLS-ORG-WF-001"
        }
      },

      "devToolsOrganizationWorkflow": {
        "workflowId": "DEVTOOLS-ORG-WF-001",
        "name": "devtools-organization-workflow",
        "type": "specialized-development-tooling",
        "description": "Comprehensive workflow for organizing development tools into structured devtools directory with web-based indexing and proper import management",
        "priority": 2,
        "status": "active",
        "triggerPatterns": ["organize devtools", "migrate tools", "devtools index", "development tools", "tool organization", "create devtools index", "move testing tools"],
        "parentWorkflow": "base-input-output-workflow",
        "location": "levCompiler/.control/workflows/devtools-organization-workflow.json",
        "primaryAgent": "FILE-OPERATIONS-001",
        "fileManagement": {
          "outputLocation": "devtools/",
          "indexRegistration": "devtools/index.html",
          "toolCategories": ["testing-tools", "wp-admin-tools", "standalone-scripts", "automated-checks", "dev-utilities"],
          "documentationRequirement": "comprehensive-web-index-and-readme"
        },
        "delegatedFrom": ["BUG-RESOLUTION-WF-001"]
      },

      "designSystemComplianceWorkflow": {
        "workflowId": "DESIGN-SYSTEM-COMPLIANCE-WF-001",
        "name": "design-system-compliance-workflow",
        "type": "continuous-compliance-monitoring-and-improvement",
        "description": "Comprehensive design system compliance workflow with severity assessment, corrective action orchestration, and continuous improvement",
        "priority": 1,
        "status": "active",
        "triggerPatterns": ["compliance violation", "design system violation", "hardcoded values detected", "token system violation", "semantic system breach"],
        "parentWorkflow": "continuous-monitoring",
        "location": "levCompiler/.control/workflows/design_system_compliance_workflow.json",
        "primaryAgent": "DESIGN-SYSTEM-MONITOR-001",
        "supportingAgents": ["WORKFLOW-AGENT-ANALYZER-001", "VERSION-TRACK-001"],
        "monitoringType": "real-time-continuous",
        "severityBasedActions": {
          "critical": "immediate-redo-loop-initiation",
          "high": "priority-correction-scheduling",
          "medium": "sprint-integration-scheduling",
          "low": "backlog-addition-with-prioritization"
        },
        "improvementCapabilities": {
          "realTimeWorkflowUpdates": true,
          "realTimeAgentUpdates": true,
          "gitLikeVersionTracking": true
        }
      },

      "cssSemanticCleanupWorkflow": {
        "workflowId": "CSS-SEMANTIC-CLEANUP-WF-001",
        "name": "css-semantic-cleanup-workflow",
        "type": "critical-cleanup-and-regeneration",
        "description": "Comprehensive workflow for cleaning up hardcoded CSS violations and establishing semantic token system as single source of truth",
        "priority": 1,
        "status": "active",
        "triggerPatterns": ["hardcoded css cleanup", "semantic css cleanup", "css violations", "clean css files", "semantic tokenization cleanup"],
        "parentWorkflow": "base-input-output-workflow",
        "location": "levCompiler/.control/workflows/css_semantic_cleanup_workflow.json",
        "primaryAgent": "CSS-SEMANTIC-GEN-001",
        "supportingAgents": ["VERSION-TRACK-001"],
        "automaticTriggers": [
          "hardcoded-value-detection",
          "duplicate-css-files",
          "conflicting-token-systems"
        ],
        "complianceEnforcement": {
          "zeroToleranceHardcodedValues": true,
          "twoFileArchitectureEnforcement": true,
          "semanticTokenComplianceRequired": true
        }
      },

      "visualDesignComplianceWorkflow": {
        "workflowId": "VISUAL-DESIGN-COMPLIANCE-WF-001",
        "name": "visual-design-compliance-workflow",
        "type": "specialized-compliance-validation",
        "description": "Comprehensive workflow for automated visual compliance analysis between UI/UX design specifications and actual implementation with semantic token validation",
        "priority": 2,
        "status": "active",
        "triggerPatterns": ["visual compliance check", "design validation", "implementation review", "compliance analysis", "design token validation", "visual audit", "screenshot comparison", "design system compliance", "semantic token check", "ui ux validation"],
        "parentWorkflow": "ui-ux-creation-workflow",
        "location": "levCompiler/.control/workflows/visual_design_compliance_workflow.json",
        "primaryAgent": "VISUAL-COMPLIANCE-ANALYZER-001",
        "supportingAgents": ["TASK-PLANNER-001", "VERSION-TRACK-001"],
        "tempScreenshotManagement": {
          "enabled": true,
          "maxFiles": 100,
          "location": "levCompiler/temp/screenshots/",
          "autoCleanup": true
        },
        "integrationPoints": {
          "visualValidationTool": "levCompiler/tools/visual-validation/",
          "uiUxDesignWorkflow": "levCompiler/project_context/designs/",
          "taskManagementWorkflow": "levCompiler/project_context/tasks/"
        },
        "qualityGates": {
          "semanticTokenCompliance": 1.0,
          "visualAccuracy": 0.90,
          "accessibilityCompliance": 1.0,
          "responsiveDesignQuality": 0.95,
          "brandConsistency": 0.95
        }
      },

      "manualVisualComparisonWorkflow": {
        "workflowId": "MANUAL-VISUAL-COMPARISON-WF-001",
        "name": "manual-visual-comparison-orchestrator-workflow",
        "type": "orchestrator-manual-trigger",
        "description": "High-level orchestrator workflow for manual visual comparison that intelligently delegates to visual compliance system with automatic task context integration",
        "priority": 1,
        "status": "active",
        "triggerPatterns": ["manual visual comparison", "compare implementation", "visual validation check", "design compliance review", "implementation vs design", "manual comparison workflow"],
        "parentWorkflow": "base-input-output-workflow",
        "location": "levCompiler/.control/workflows/manual_visual_comparison_workflow.json",
        "primaryAgent": "VISUAL-COMPLIANCE-ANALYZER-001",
        "supportingAgents": ["TASK-PLANNER-001", "VERSION-TRACK-001"],
        "delegatedWorkflow": "VISUAL-DESIGN-COMPLIANCE-WF-001",
        "executionDirectoryIntegration": {
          "enabled": true,
          "outputLocation": "levCompiler/project_context/tasks/execution/",
          "reportFormat": "visual-comparison-[pageName]-[timestamp].md",
          "assetLinking": "relative-paths-to-temp-screenshots"
        },
        "automationPropagation": {
          "enabled": true,
          "immediateActions": ["critical-violations", "semantic-token-violations"],
          "scheduledActions": ["design-system-updates", "quality-gate-integration"],
          "continuousActions": ["progress-monitoring", "learning-loop"]
        }
      }
    }
  },

  "workflowRouting": {
    "routingStrategy": "intelligent-pattern-matching",
    "defaultRouter": "human-interaction-agent",
    "confidenceThreshold": 0.80,

    "routingRules": {
      "projectAnalysis": {
        "inputPatterns": ["analyze", "analyze project", "existing project", "integration", "understand project", "project context", "legacy project", "import project"],
        "contextRequired": ["project-path", "analysis-scope", "integration-goals"],
        "targetWorkflow": "project-analysis-workflow",
        "confidence": 0.90,
        "estimatedDuration": "120-200 minutes"
      },

      "projectSetup": {
        "inputPatterns": ["setup", "initialize", "create project", "new project", "bootstrap", "scaffold"],
        "contextRequired": ["project-requirements", "team-preferences", "deployment-target"],
        "targetWorkflow": "project-setup-workflow",
        "confidence": 0.90,
        "estimatedDuration": "60-120 minutes"
      },

      "codeGeneration": {
        "inputPatterns": ["create", "build", "implement", "generate", "write code", "develop"],
        "contextRequired": ["requirements", "specifications", "technology-preferences"],
        "targetWorkflow": "code-generation-workflow",
        "confidence": 0.85,
        "estimatedDuration": "30-60 minutes"
      },

      "visualDevelopment": {
        "inputPatterns": ["visual", "ui", "design", "mockup", "wireframe", "frontend", "interface"],
        "contextRequired": ["visual-input", "design-requirements", "target-platform"],
        "targetWorkflow": "visual-development-workflow",
        "confidence": 0.85,
        "estimatedDuration": "45-90 minutes"
      },

      "uiUxCreation": {
        "inputPatterns": ["ui design", "ux design", "create designs", "design system", "wireframes", "user interface", "user experience", "premium designs"],
        "contextRequired": ["design-requirements", "brand-guidelines", "target-audience"],
        "targetWorkflow": "ui-ux-creation-workflow",
        "confidence": 0.90,
        "estimatedDuration": "300-480 minutes",
        "requiredAgent": "UI-UX-DESIGN-001",
        "fileOrganization": "project-context-designs-folder"
      },

      "luxuryMedicalSpaDesign": {
        "inputPatterns": ["luxury design", "medical spa design", "premium ui", "brand consistency", "luxury medical spa", "sophisticated design", "consultation focused design", "redesign ui", "luxury positioning", "premium medical spa"],
        "contextRequired": ["base-requirements", "luxury-brand-guidelines", "medical-spa-positioning"],
        "targetWorkflow": "luxury-medical-spa-design-workflow",
        "confidence": 0.95,
        "estimatedDuration": "480-720 minutes",
        "requiredAgent": "UI-UX-DESIGN-001",
        "fileOrganization": "project-context-designs-folder",
        "brandCompliance": "mandatory",
        "qualityAssurance": "luxury-brand-validation-required"
      },

      "codeReview": {
        "inputPatterns": ["review", "check", "analyze", "validate", "audit", "inspect"],
        "contextRequired": ["source-code", "review-criteria"],
        "targetWorkflow": "code-review-standalone-workflow",
        "confidence": 0.90,
        "estimatedDuration": "15-30 minutes",
        "status": "planned"
      },

      "codeOptimization": {
        "inputPatterns": ["cleanup", "optimize", "refactor", "improve", "performance"],
        "contextRequired": ["target-code", "optimization-goals"],
        "targetWorkflow": "code-optimization-workflow",
        "confidence": 0.80,
        "estimatedDuration": "20-40 minutes",
        "status": "planned"
      },

      "devToolsOrganization": {
        "inputPatterns": ["organize devtools", "migrate tools", "devtools index", "development tools", "tool organization", "create devtools index", "move testing tools", "organize development tools"],
        "contextRequired": ["tool-inventory", "target-structure", "migration-requirements"],
        "targetWorkflow": "devtools-organization-workflow",
        "confidence": 0.90,
        "estimatedDuration": "45-60 minutes",
        "requiredAgent": "FILE-OPERATIONS-001",
        "fileOrganization": "devtools-directory-structure"
      }
    }
  },

  "workflowCoordination": {
    "orchestrationModes": {
      "sequential": {
        "description": "Execute workflows in sequence with full handoffs",
        "useCase": "Complex workflows requiring previous outputs",
        "example": "Visual analysis → Code generation → Review → Deployment"
      },

      "parallel": {
        "description": "Execute multiple workflows simultaneously",
        "useCase": "Independent workflows that can run concurrently",
        "example": "Multiple feature implementations in parallel"
      },

      "conditional": {
        "description": "Execute different workflows based on runtime conditions",
        "useCase": "Branching logic based on input analysis or intermediate results",
        "example": "Route to optimization workflow only if performance issues detected"
      },

      "iterative": {
        "description": "Repeat workflows until success criteria are met",
        "useCase": "Quality improvement cycles or progressive refinement",
        "example": "Generate → Review → Refine → Review cycle until approved"
      }
    },

    "handoffProtocols": {
      "contextPreservation": {
        "fullContextTransfer": "Complete context including metadata and history",
        "statePreservation": "Maintain workflow state across transitions",
        "errorContextMaintenance": "Preserve error context for debugging and learning"
      },

      "qualityAssurance": {
        "outputValidation": "Validate outputs before handoff to next workflow",
        "confidenceVerification": "Ensure confidence levels meet thresholds",
        "completenessChecking": "Verify all required outputs are present"
      }
    }
  },

  "workflowExecution": {
    "executionEngine": {
      "type": "agent-orchestrated",
      "coordinator": "human-interaction-agent",
      "failureHandling": "graceful-degradation-with-escalation",
      "performanceOptimization": "dynamic-resource-allocation"
    },

    "resourceManagement": {
      "concurrencyLimits": {
        "maxConcurrentWorkflows": 5,
        "maxAgentsPerWorkflow": 3,
        "resourcePooling": "dynamic-allocation"
      },

      "prioritization": {
        "priorityQueuing": "priority-based-scheduling",
        "resourcePreemption": "high-priority-can-preempt-low-priority",
        "loadBalancing": "intelligent-agent-distribution"
      }
    }
  },

  "qualityAndCompliance": {
    "universalQualityGates": {
      "inputValidation": {
        "description": "All inputs must be validated before processing",
        "threshold": 1.0,
        "applicability": "all-workflows"
      },

      "securityValidation": {
        "description": "Security checks must be performed at key points",
        "threshold": 0.95,
        "applicability": "code-generating-workflows"
      },

      "outputApproval": {
        "description": "Final outputs must pass gatekeeping approval",
        "threshold": 0.90,
        "applicability": "all-delivery-workflows"
      }
    },

    "complianceRequirements": {
      "auditTrail": "Complete audit trail of all workflow steps and decisions",
      "versionControl": "All outputs must be version controlled",
      "documentation": "Comprehensive documentation of all processes and outputs",
      "humanOversight": "Human supervision points clearly defined and enforced"
    }
  },

  "monitoringAndObservability": {
    "realTimeMetrics": {
      "activeWorkflows": "Number of currently executing workflows",
      "queueDepth": "Number of workflows waiting to execute",
      "averageExecutionTime": "Average workflow completion time",
      "successRate": "Percentage of workflows completing successfully",
      "agentUtilization": "Utilization percentage of each agent type"
    },

    "alerting": {
      "performanceAlerts": {
        "slowWorkflows": "Alert when workflows exceed expected duration",
        "highQueueDepth": "Alert when queue depth exceeds threshold",
        "lowSuccessRate": "Alert when success rate drops below threshold"
      },

      "qualityAlerts": {
        "qualityGateFailures": "Alert on quality gate failures",
        "highEscalationRate": "Alert when human escalation rate increases",
        "repeatedFailures": "Alert on patterns of repeated failures"
      }
    },

    "dashboards": {
      "executiveDashboard": "High-level metrics for management visibility",
      "operationalDashboard": "Detailed operational metrics for monitoring",
      "agentPerformanceDashboard": "Individual agent performance metrics",
      "workflowEfficiencyDashboard": "Workflow-specific efficiency metrics"
    }
  },

  "evolutionAndLearning": {
    "adaptiveOptimization": {
      "routingOptimization": "Continuously improve routing accuracy based on outcomes",
      "performanceTuning": "Optimize workflow performance based on execution data",
      "qualityImprovement": "Enhance quality gates based on feedback and results"
    },

    "learningMechanisms": {
      "patternRecognition": "Learn successful patterns for different input types",
      "failureAnalysis": "Analyze failures to prevent recurrence",
      "performanceProfiling": "Profile workflow performance for optimization",
      "userPreferenceLearning": "Adapt to user preferences and feedback"
    },

    "continuousImprovement": {
      "weeklyReviews": "Weekly analysis of workflow performance and outcomes",
      "monthlyOptimization": "Monthly optimization cycles for workflow improvements",
      "quarterlyEvolution": "Quarterly evolution planning and implementation",
      "annualArchitectureReview": "Annual architecture review and major updates"
    }
  },

  "integrationPoints": {
    "externalSystems": {
      "versionControlSystems": "Git integration for code and artifact management",
      "cicdPipelines": "Integration with CI/CD systems for deployment",
      "projectManagementTools": "Integration with project management and tracking",
      "communicationPlatforms": "Integration with team communication tools"
    },

    "dataExchange": {
      "inputFormats": ["json", "yaml", "text", "images", "files"],
      "outputFormats": ["json", "yaml", "text", "code-files", "documentation"],
      "apiEndpoints": "RESTful API endpoints for external integration",
      "webhooks": "Webhook support for event-driven integration"
    }
  },

  "deployment": {
    "deploymentStrategy": {
      "rolloutApproach": "phased-rollout-with-canary-testing",
      "rollbackCapability": "complete-rollback-support",
      "environmentSupport": ["development", "staging", "production"]
    },

    "configuration": {
      "environmentSpecific": "Environment-specific configuration management",
      "featureFlags": "Feature flag support for gradual feature enablement",
      "configurationValidation": "Configuration validation and consistency checking"
    }
  },

  "maintenanceAndSupport": {
    "operationalProcedures": {
      "startupSequence": "Proper workflow system startup and initialization",
      "shutdownProcedure": "Graceful shutdown with active workflow completion",
      "healthChecks": "Comprehensive health checking and system validation",
      "backupAndRecovery": "Backup and recovery procedures for workflow state"
    },

    "troubleshooting": {
      "commonIssues": "Documentation of common issues and solutions",
      "diagnosticTools": "Tools for diagnosing workflow and agent issues",
      "escalationProcedures": "Clear escalation paths for complex issues",
      "supportContacts": "Contact information for technical support"
    }
  }
}
