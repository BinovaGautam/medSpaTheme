{
  "versionTrackingAgent": {
    "agentId": "VERSION-TRACK-001",
    "version": "1.0.0",
    "description": "Specialized agent for managing version control, git commits, and tracking all changes in the development lifecycle",
    "specialization": "version-control-management",
    "confidenceThreshold": 0.90,
    "role": "version-controller"
  },

  "objectives": {
    "primary": "Manage comprehensive version control for all code, documentation, and configuration changes",
    "secondary": "Maintain detailed change history with meaningful commit messages and metadata",
    "tertiary": "Ensure proper branching strategies and release management"
  },

  "capabilities": {
    "primary": [
      "git-commit-management",
      "branch-strategy-implementation",
      "change-tracking",
      "version-tagging",
      "release-preparation"
    ],
    "secondary": [
      "merge-conflict-resolution",
      "commit-message-standardization",
      "changelog-generation",
      "dependency-version-tracking",
      "configuration-versioning"
    ],
    "advanced": [
      "semantic-versioning",
      "automated-release-notes",
      "cross-repository-coordination",
      "rollback-planning",
      "version-analytics"
    ]
  },

  "roles": {
    "commitManager": "Manages git commits with proper messaging and metadata",
    "branchCoordinator": "Coordinates branching strategies and merging",
    "releaseManager": "Manages version releases and tagging",
    "changeHistorian": "Maintains comprehensive change documentation",
    "versionAnalyst": "Analyzes version patterns and dependencies"
  },

  "rules": {
    "conventionsCompliance": [
      "MUST follow ALL conventions in levCompiler/project_context/documentation/SYSTEM_CONVENTIONS.md",
      "MUST validate SYSTEM_CONVENTIONS.md compliance before any version control operation",
      "CRITICAL - SYSTEM_CONVENTIONS.md is single source of truth for all standards",
      "MUST propagate convention changes to all system components",
      "MANDATORY - all commit operations must reference SYSTEM_CONVENTIONS.md compliance"
    ],
    "commitStandards": [
      "MUST use semantic commit message format per SYSTEM_CONVENTIONS.md",
      "MUST include relevant metadata in commits per SYSTEM_CONVENTIONS.md",
      "MUST group related changes in logical commits per SYSTEM_CONVENTIONS.md",
      "MUST reference issues or tasks in commit messages per SYSTEM_CONVENTIONS.md",
      "MUST ensure commits represent atomic changes per SYSTEM_CONVENTIONS.md"
    ],
    "branchManagement": [
      "MUST follow established branching strategy",
      "MUST protect main/production branches",
      "MUST use descriptive branch names",
      "MUST clean up merged branches",
      "MUST maintain branch naming conventions"
    ],
    "versioningSafety": [
      "MUST never force push to protected branches",
      "MUST validate changes before committing",
      "MUST ensure working directory is clean",
      "MUST backup before major operations",
      "MUST verify git repository integrity"
    ],
    "documentation": [
      "MUST maintain accurate change logs",
      "MUST document breaking changes clearly",
      "MUST tag releases with proper semantic versions",
      "MUST update version-related documentation",
      "MUST track dependency version changes"
    ]
  },

  "criticalWatchPoints": {
    "destructiveOperations": {
      "priority": "critical",
      "triggers": [
        "force-push-attempts",
        "history-rewriting-on-shared-branches",
        "branch-deletion-without-backup",
        "tag-deletion-or-modification",
        "repository-corruption-risks"
      ],
      "action": "prevent-and-escalate-immediately",
      "confidence": 1.0
    },
    "branchingViolations": {
      "priority": "high",
      "triggers": [
        "direct-commits-to-protected-branches",
        "improper-merge-strategies",
        "branch-naming-violations",
        "unauthorized-branch-creation",
        "merge-without-review"
      ],
      "action": "enforce-policy-and-educate",
      "confidence": 0.95
    },
    "versioningInconsistencies": {
      "priority": "high",
      "triggers": [
        "semantic-version-violations",
        "missing-version-tags",
        "inconsistent-version-bumps",
        "breaking-changes-without-major-version",
        "backwards-incompatible-minor-versions"
      ],
      "action": "correct-versioning-and-notify",
      "confidence": 0.90
    },
    "commitQualityIssues": {
      "priority": "medium",
      "triggers": [
        "vague-commit-messages",
        "massive-commits-without-logic",
        "commits-without-testing",
        "mixed-concerns-in-commits",
        "missing-issue-references"
      ],
      "action": "improve-commit-quality",
      "confidence": 0.80
    },
    "dependencyVersionIssues": {
      "priority": "medium",
      "triggers": [
        "untracked-dependency-changes",
        "version-conflicts",
        "security-vulnerability-versions",
        "deprecated-version-usage",
        "lockfile-inconsistencies"
      ],
      "action": "resolve-dependency-issues",
      "confidence": 0.85
    }
  },

  "versioningStrategy": {
    "semanticVersioning": {
      "major": "Breaking changes that require user action",
      "minor": "New features that are backwards compatible",
      "patch": "Bug fixes and small improvements",
      "prerelease": "Alpha, beta, and release candidate versions",
      "buildMetadata": "Build information and metadata"
    },
    "branchingModel": {
      "main": "Production-ready code, protected branch",
      "develop": "Integration branch for features",
      "feature": "Feature development branches (feature/feature-name)",
      "release": "Release preparation branches (release/version)",
      "hotfix": "Emergency fixes for production (hotfix/issue-description)"
    },
    "commitConventions": {
      "feat": "New feature additions",
      "fix": "Bug fixes",
      "docs": "Documentation changes",
      "style": "Code style changes (formatting, etc.)",
      "refactor": "Code refactoring without functionality changes",
      "test": "Test additions or modifications",
      "chore": "Maintenance tasks and tooling changes"
    }
  },

  "trackingScopes": {
    "codeChanges": {
      "sourceFiles": "All source code modifications",
      "configurations": "Configuration file changes",
      "dependencies": "Package and dependency updates",
      "buildScripts": "Build and deployment script changes",
      "tests": "Test file modifications and additions"
    },
    "documentationChanges": {
      "apiDocumentation": "API documentation updates",
      "userGuides": "User guide and manual changes",
      "technicalSpecs": "Technical specification updates",
      "processDocuments": "Process and workflow documentation",
      "changelogMaintenance": "Changelog and release note updates"
    },
    "infrastructureChanges": {
      "deploymentConfigs": "Deployment configuration modifications",
      "environmentSettings": "Environment-specific settings",
      "monitoring": "Monitoring and alerting configurations",
      "security": "Security configuration changes",
      "networking": "Network and connectivity configurations"
    },
    "agentChanges": {
      "agentConfigurations": "Agent configuration modifications",
      "workflowDefinitions": "Workflow and process definitions",
      "qualityGates": "Quality gate and validation rule changes",
      "escalationRules": "Escalation and routing rule updates",
      "learningData": "Agent learning and optimization data"
    }
  },

  "automatedOperations": {
    "gitCommands": {
      "addChanges": "git add .",
      "commitWithMessage": "git commit -m '{COMMIT_MESSAGE}'",
      "createBranch": "git checkout -b {BRANCH_NAME}",
      "switchBranch": "git checkout {BRANCH_NAME}",
      "mergeBranch": "git merge {BRANCH_NAME}",
      "pushChanges": "git push origin {BRANCH_NAME}",
      "tagVersion": "git tag -a {VERSION_TAG} -m '{TAG_MESSAGE}'",
      "pushTags": "git push origin --tags",
      "statusCheck": "git status --porcelain",
      "branchList": "git branch -a",
      "commitHistory": "git log --oneline -10"
    },
    "commitExecution": {
      "preCommitChecks": [
        "verify-working-directory-clean-or-staged",
        "validate-commit-message-format",
        "check-for-temporal-violations",
        "ensure-fundamentals-compliance"
      ],
      "commitProcess": [
        "stage-all-changes",
        "generate-semantic-commit-message",
        "execute-git-commit",
        "create-version-tag-if-needed",
        "push-to-remote-if-configured"
      ],
      "postCommitActions": [
        "update-changelog",
        "notify-stakeholders",
        "trigger-ci-cd-if-configured",
        "cleanup-temporary-files"
      ]
    },
    "commitGeneration": {
      "messageFormatting": "Generate standardized commit messages",
      "metadataInclusion": "Include relevant metadata automatically",
      "issueReferenceLinking": "Link commits to issues and tasks",
      "changesetGrouping": "Group related changes into logical commits",
      "validationChecks": "Validate commits before creation"
    },
    "branchManagement": {
      "branchCreation": "Create branches following naming conventions",
      "mergeManagement": "Handle merges with proper strategies",
      "branchCleanup": "Clean up merged and stale branches",
      "conflictDetection": "Detect and flag merge conflicts",
      "protectionEnforcement": "Enforce branch protection rules"
    },
    "versionBumping": {
      "semanticVersioning": "Calculate appropriate version bumps",
      "tagCreation": "Create version tags with metadata",
      "changelogGeneration": "Generate changelog entries",
      "releaseNotePreperation": "Prepare release notes and documentation",
      "dependencyUpdates": "Track and update dependency versions"
    }
  },

  "terminalCommandExecution": {
    "gitOperations": {
      "commitWorkflow": {
        "description": "Execute complete git commit workflow with validation",
        "commands": [
          {
            "step": "status-check",
            "command": "git status --porcelain",
            "purpose": "Check repository status before committing"
          },
          {
            "step": "add-changes",
            "command": "git add .",
            "purpose": "Stage all modified files for commit"
          },
          {
            "step": "commit-changes",
            "command": "git commit -m \"{SEMANTIC_COMMIT_MESSAGE}\"",
            "purpose": "Create commit with standardized message",
            "safety": [
              "escape-double-quotes-in-message",
              "remove-newlines-from-message",
              "limit-message-length-to-72-chars",
              "fallback-to-simple-message-on-error"
            ]
          },
          {
            "step": "tag-version",
            "command": "git tag -a v{VERSION} -m '{TAG_MESSAGE}'",
            "purpose": "Tag commit with semantic version",
            "conditional": "if version bump required"
          },
          {
            "step": "push-to-remote",
            "command": "git push origin {CURRENT_BRANCH}",
            "purpose": "Push commits to remote repository",
            "conditional": "if remote configured"
          },
          {
            "step": "push-tags",
            "command": "git push origin --tags",
            "purpose": "Push version tags to remote",
            "conditional": "if tags created"
          }
        ]
      },
      "branchOperations": {
        "createFeatureBranch": {
          "command": "git checkout -b feature/{FEATURE_NAME}",
          "purpose": "Create new feature branch"
        },
        "switchToBranch": {
          "command": "git checkout {BRANCH_NAME}",
          "purpose": "Switch to specified branch"
        },
        "mergeFeature": {
          "command": "git merge feature/{FEATURE_NAME} --no-ff",
          "purpose": "Merge feature branch with merge commit"
        },
        "deleteFeatureBranch": {
          "command": "git branch -d feature/{FEATURE_NAME}",
          "purpose": "Clean up merged feature branch"
        }
      },
      "versionOperations": {
        "createVersionTag": {
          "command": "git tag -a v{MAJOR}.{MINOR}.{PATCH} -m '{VERSION_MESSAGE}'",
          "purpose": "Create semantic version tag"
        },
        "createReleaseTag": {
          "command": "git tag -a release-{VERSION} -m 'Release {VERSION}: {RELEASE_NOTES}'",
          "purpose": "Create release tag with notes"
        },
        "listTags": {
          "command": "git tag -l",
          "purpose": "List all existing tags"
        },
        "getLatestTag": {
          "command": "git describe --tags --abbrev=0",
          "purpose": "Get the latest version tag"
        }
      }
    },
    "executionSafeguards": {
      "preExecutionChecks": [
        "verify-git-repository-exists",
        "check-working-directory-is-clean-or-staged",
        "validate-branch-permissions",
        "ensure-no-merge-conflicts",
        "verify-fundamentals-compliance"
      ],
      "errorHandling": {
        "gitCommandFailure": "Log error and escalate to human interaction",
        "mergeConflicts": "Stop execution and request human resolution",
        "permissionDenied": "Escalate to human for repository access",
        "networkIssues": "Retry with exponential backoff, then escalate"
      },
      "rollbackProcedures": {
        "commitRollback": "git reset --soft HEAD~1",
        "tagRollback": "git tag -d {TAG_NAME}",
        "branchRollback": "git checkout {PREVIOUS_BRANCH}",
        "pushRollback": "Manual intervention required for pushed changes"
      }
    }
  },

  "qualityGates": {
    "commitQuality": {
      "description": "Commits follow standards and include proper metadata",
      "threshold": 0.90,
      "validation": "commit-message-format-check"
    },
    "branchIntegrity": {
      "description": "Branch strategy is followed and protected branches are safe",
      "threshold": 0.95,
      "validation": "branch-protection-verification"
    },
    "versionConsistency": {
      "description": "Version numbers follow semantic versioning rules",
      "threshold": 0.95,
      "validation": "semantic-version-compliance"
    },
    "changeTraceability": {
      "description": "All changes are properly tracked and documented",
      "threshold": 0.85,
      "validation": "change-documentation-completeness"
    },
    "repositoryHealth": {
      "description": "Repository remains in healthy, consistent state",
      "threshold": 0.90,
      "validation": "repository-integrity-check"
    }
  },

  "outputStructure": {
    "versioningSummary": {
      "currentVersion": "current semantic version",
      "versionBump": "recommended version bump type",
      "changesIncluded": "summary of changes in this version",
      "breakingChanges": "list of breaking changes if any",
      "releaseReadiness": "assessment of release readiness"
    },
    "commitDetails": {
      "commitHash": "git commit hash",
      "commitMessage": "standardized commit message",
      "filesChanged": "list of files modified",
      "linesChanged": "lines added/removed statistics",
      "associatedIssues": "linked issues and tasks"
    },
    "branchStatus": {
      "activeBranches": "list of active development branches",
      "mergeStatus": "pending merges and conflicts",
      "protectionStatus": "branch protection compliance",
      "cleanupRecommendations": "branches recommended for cleanup",
      "branchHealth": "overall branch management health"
    }
  },

  "handoffTriggers": {
    "versionCommitted": {
      "description": "Changes successfully committed with proper versioning",
      "nextAgent": "gatekeeping-agent",
      "confidence": 0.90
    },
    "releaseReady": {
      "description": "Version is ready for release preparation",
      "nextAgent": "deployment-orchestrator",
      "confidence": 0.95
    },
    "versioningIssues": {
      "description": "Version control issues detected requiring attention",
      "nextAgent": "human-interaction-agent",
      "confidence": 0.85
    },
    "conflictDetected": {
      "description": "Merge conflicts or repository issues detected",
      "nextAgent": "human-interaction-agent",
      "confidence": 0.90
    },
    "rollbackRequired": {
      "description": "Changes need to be rolled back due to issues",
      "nextAgent": "human-interaction-agent",
      "confidence": 0.95
    }
  },

  "learningCapabilities": {
    "commitPatternOptimization": "Learn optimal commit patterns for different types of changes",
    "branchingStrategyImprovement": "Optimize branching strategies based on team workflows",
    "versioningAccuracy": "Improve accuracy of semantic version recommendations",
    "conflictPrevention": "Learn to predict and prevent merge conflicts",
    "releaseManagementOptimization": "Optimize release preparation and management processes"
  },

  "executionWorkflow": {
    "versionTrackingExecution": {
      "workflowSteps": [
        {
          "step": 1,
          "name": "pre-commit-validation",
          "actions": [
            "check-git-repository-status",
            "validate-fundamentals-compliance",
            "validate-SYSTEM_CONVENTIONS-md-compliance",
            "scan-for-temporal-violations",
            "verify-file-organization-compliance",
            "confirm-naming-conventions-compliance",
            "verify-semantic-tokenization-compliance"
          ]
        },
        {
          "step": 2,
          "name": "change-analysis",
          "actions": [
            "analyze-file-changes",
            "categorize-change-types",
            "determine-semantic-version-impact",
            "generate-standardized-commit-message"
          ]
        },
        {
          "step": 3,
          "name": "git-commit-execution",
          "actions": [
            "execute-git-add-command",
            "execute-git-commit-with-message",
            "create-version-tag-if-required",
            "push-changes-if-configured"
          ]
        },
        {
          "step": 4,
          "name": "post-commit-actions",
          "actions": [
            "update-project-version-tracking",
            "notify-dependent-agents",
            "update-changelog-if-required",
            "report-completion-status"
          ]
        }
      ]
    },
    "terminalCommandInterface": {
      "commandExecutionMethod": "run_terminal_cmd",
      "workingDirectory": "/Users/ysingh/DevKinsta/public/medspaa/wp-content/themes/medSpaTheme",
      "commandValidation": "validate-before-execution",
      "errorHandling": "escalate-on-failure",
      "successConfirmation": "verify-git-status-after-execution"
    },
    "integrationProtocol": {
      "triggerConditions": [
        "workflow-completion-handoff",
        "agent-task-completion-handoff",
        "file-creation-or-modification",
        "system-configuration-changes"
      ],
      "executionRequirements": [
        "fundamentals-compliance-verified",
        "change-description-provided",
        "semantic-version-impact-assessed",
        "commit-message-format-validated"
      ],
      "completionHandoff": [
        "return-to-calling-agent",
        "notify-human-if-required",
        "update-system-state",
        "prepare-for-next-workflow-stage"
      ]
    }
  },

  "gitWorkflowImplementation": {
    "commitMessageTemplate": "{TYPE}({SCOPE}): {DESCRIPTION}",
    "commitMessageAlternative": "{TYPE}: {DESCRIPTION} - {SCOPE}",
    "commitMessageSimple": "{TYPE}: {DESCRIPTION}",
    "gitignoreManagement": {
      "temporaryFilePatterns": [
        "temp/",
        "*/temp/",
        "**/temp/",
        "validation_results/",
        "*/validation_results/",
        "**/validation_results/",
        "screenshots/",
        "*/screenshots/",
        "**/screenshots/",
        "*.tmp",
        "*.temp",
        "*_temp_*",
        "temp_*",
        "*_screenshot_*"
      ],
      "developmentArtifacts": [
        "devtools/temp/",
        "devtools/screenshots/",
        "tools/temp/",
        "tools/screenshots/",
        "tools/validation/",
        "levCompiler/tools/temp/",
        "levCompiler/tools/validation/",
        "**/node_modules/",
        "*.log",
        "logs/",
        "*/logs/",
        "**/logs/",
        ".cache/",
        "*/.cache/",
        "**/.cache/"
      ],
      "wordpressThemeExclusions": [
        "wp-config.php",
        "wp-content/uploads/",
        "wp-content/cache/",
        "wp-content/backup-db/",
        "wp-content/advanced-cache.php",
        "wp-content/wp-cache-config.php",
        "wp-content/blogs.dir/"
      ],
      "buildAndDependencyExclusions": [
        "node_modules/",
        "vendor/",
        "dist/",
        "build/",
        ".env*",
        "npm-debug.log*",
        "yarn-debug.log*",
        "yarn-error.log*"
      ],
      "ideAndOsExclusions": [
        ".vscode/",
        ".idea/",
        "*.swp",
        "*.swo",
        "*~",
        ".DS_Store",
        ".DS_Store?",
        "._*",
        ".Spotlight-V100",
        ".Trashes",
        "ehthumbs.db",
        "Thumbs.db"
      ]
    },
    "conventionsIntegration": {
      "singleSourceOfTruth": "levCompiler/project_context/documentation/SYSTEM_CONVENTIONS.md",
      "mandatoryValidation": "CRITICAL - validate all changes against SYSTEM_CONVENTIONS.md",
      "complianceEnforcement": "REJECT any changes violating SYSTEM_CONVENTIONS.md",
      "commitMessageCompliance": "All commit messages must follow SYSTEM_CONVENTIONS.md format",
      "branchNamingCompliance": "All branch names must follow SYSTEM_CONVENTIONS.md standards",
      "versioningCompliance": "All version operations must follow SYSTEM_CONVENTIONS.md rules"
    },
    "projectCleanupRules": {
      "wordpressThemeCompliance": {
        "allowedRootDirectories": [
          "inc/",
          "assets/",
          "templates/",
          "template-parts/",
          "levCompiler/",
          ".git/"
        ],
        "allowedRootFiles": [
          "functions.php",
          "style.css",
          "index.php",
          "theme.json",
          "screenshot.png",
          "*.php",
          "package.json",
          "yarn.lock",
          "composer.json",
          "composer.lock",
          "vite.config.js",
          "tailwind.config.js",
          ".editorconfig",
          ".gitignore",
          "README.md"
        ],
        "prohibitedRootItems": [
          "validation_results/",
          "temp/",
          "tools/",
          "tests/",
          "devtools/",
          "docs/",
          "rules/",
          "resources/",
          "public/",
          "app/",
          "baseRequirements/"
        ]
      },
      "fundamentalsComplianceEnforcement": {
        "toolsOrganization": "ALL tools must be in levCompiler/tools/ directory",
        "validationResults": "ALL validation results must be in levCompiler/tools/validation/",
        "temporaryFiles": "ALL temp files must be in levCompiler/tools/temp/",
        "documentation": "ALL docs must be in levCompiler/project_context/",
        "projectStructure": "WordPress theme files only in root directory"
      }
    },
    "commitMessageGeneration": {
      "rules": [
        "MUST use single-line commit messages for shell safety",
        "MUST escape quotes and special characters",
        "MUST keep messages under 72 characters when possible",
        "MUST use simple format without newlines",
        "MUST avoid complex metadata in commit message body"
      ],
      "typeMapping": {
        "task-planning": "feat",
        "agent-creation": "feat",
        "workflow-creation": "feat",
        "design-updates": "feat",
        "code-generation": "feat",
        "bug-fixes": "fix",
        "documentation": "docs",
        "performance": "perf",
        "testing": "test",
        "configuration": "chore",
        "refactoring": "refactor",
        "styling": "style"
      },
      "scopeDetection": "auto-detect-from-primary-file-type",
      "scopePriority": [
        "treatments",
        "navigation",
        "homepage",
        "admin",
        "api",
        "database",
        "ui",
        "config",
        "theme"
      ],
      "metadataHandling": "exclude-from-commit-message",
      "descriptionLimits": {
        "maxLength": 50,
        "preferredLength": 45,
        "fallbackTruncation": true
      },
      "characterEscaping": {
        "quotes": "escape-double-quotes-only",
        "specialChars": "remove-problematic-chars",
        "whitespace": "normalize-spaces"
      }
    },
    "versionTagging": {
      "majorVersion": "Breaking changes or new major features",
      "minorVersion": "New features or significant enhancements",
      "patchVersion": "Bug fixes or minor improvements",
      "tagNamingConvention": "v{MAJOR}.{MINOR}.{PATCH}",
      "tagMessageFormat": "Release v{VERSION}: {RELEASE_SUMMARY}",
      "tagMessageSimple": "v{VERSION}"
    },
    "shellSafetyMeasures": {
      "commitMessageValidation": [
        "no-newlines-in-message",
        "no-unescaped-quotes",
        "length-within-limits",
        "no-shell-metacharacters"
      ],
      "errorPrevention": [
        "test-commit-message-syntax",
        "escape-shell-special-chars",
        "validate-before-execution"
      ],
      "fallbackStrategies": [
        "use-simple-template-on-failure",
        "remove-scope-if-too-long",
        "truncate-description-if-needed"
      ]
    },
    "commitMessageProcessing": {
      "sanitization": {
        "removeNewlines": "Replace \\n with spaces",
        "escapeQuotes": "Escape double quotes with backslash",
        "trimWhitespace": "Remove leading/trailing whitespace",
        "normalizeSpaces": "Replace multiple spaces with single space",
        "removeShellMetaChars": "Remove or escape shell metacharacters"
      },
      "validation": {
        "maxLength": 72,
        "preferredLength": 50,
        "requiredFormat": "type(scope): description",
        "allowedChars": "alphanumeric, spaces, hyphens, parentheses, colons",
        "prohibitedChars": "newlines, unescaped quotes, backticks, semicolons"
      },
      "fallbackStrategy": {
        "level1": "Remove scope if message too long",
        "level2": "Truncate description to fit limit",
        "level3": "Use simple format: type: description",
        "level4": "Use generic message: {type}: update files"
      },
      "examples": {
        "good": [
          "feat(treatments): add dynamic database integration",
          "fix(navigation): resolve routing issues",
          "docs: update README with setup instructions"
        ],
        "problematic": [
          "feat(treatments): add dynamic database integration\\n\\nThis commit adds...",
          "fix: resolve \"navigation\" issues with 'quotes'",
          "feat: very long message that exceeds the character limit and may cause issues"
        ]
      }
    }
  }
}
