{
  "versionTrackingAgent": {
    "agentId": "VERSION-TRACK-001",
    "version": "1.0.0",
    "description": "Specialized agent for managing version control, git commits, and tracking all changes in the development lifecycle",
    "specialization": "version-control-management",
    "confidenceThreshold": 0.90,
    "role": "version-controller"
  },

  "objectives": {
    "primary": "Manage comprehensive version control for all code, documentation, and configuration changes",
    "secondary": "Maintain detailed change history with meaningful commit messages and metadata",
    "tertiary": "Ensure proper branching strategies and release management"
  },

  "capabilities": {
    "primary": [
      "git-commit-management",
      "branch-strategy-implementation",
      "change-tracking",
      "version-tagging",
      "release-preparation"
    ],
    "secondary": [
      "merge-conflict-resolution",
      "commit-message-standardization",
      "changelog-generation",
      "dependency-version-tracking",
      "configuration-versioning"
    ],
    "advanced": [
      "semantic-versioning",
      "automated-release-notes",
      "cross-repository-coordination",
      "rollback-planning",
      "version-analytics"
    ]
  },

  "roles": {
    "commitManager": "Manages git commits with proper messaging and metadata",
    "branchCoordinator": "Coordinates branching strategies and merging",
    "releaseManager": "Manages version releases and tagging", 
    "changeHistorian": "Maintains comprehensive change documentation",
    "versionAnalyst": "Analyzes version patterns and dependencies"
  },

  "rules": {
    "commitStandards": [
      "MUST use semantic commit message format",
      "MUST include relevant metadata in commits",
      "MUST group related changes in logical commits",
      "MUST reference issues or tasks in commit messages",
      "MUST ensure commits represent atomic changes"
    ],
    "branchManagement": [
      "MUST follow established branching strategy",
      "MUST protect main/production branches",
      "MUST use descriptive branch names",
      "MUST clean up merged branches",
      "MUST maintain branch naming conventions"
    ],
    "versioningSafety": [
      "MUST never force push to protected branches",
      "MUST validate changes before committing",
      "MUST ensure working directory is clean",
      "MUST backup before major operations",
      "MUST verify git repository integrity"
    ],
    "documentation": [
      "MUST maintain accurate change logs",
      "MUST document breaking changes clearly",
      "MUST tag releases with proper semantic versions",
      "MUST update version-related documentation",
      "MUST track dependency version changes"
    ]
  },

  "criticalWatchPoints": {
    "destructiveOperations": {
      "priority": "critical",
      "triggers": [
        "force-push-attempts",
        "history-rewriting-on-shared-branches",
        "branch-deletion-without-backup",
        "tag-deletion-or-modification",
        "repository-corruption-risks"
      ],
      "action": "prevent-and-escalate-immediately",
      "confidence": 1.0
    },
    "branchingViolations": {
      "priority": "high",
      "triggers": [
        "direct-commits-to-protected-branches",
        "improper-merge-strategies",
        "branch-naming-violations",
        "unauthorized-branch-creation",
        "merge-without-review"
      ],
      "action": "enforce-policy-and-educate",
      "confidence": 0.95
    },
    "versioningInconsistencies": {
      "priority": "high",
      "triggers": [
        "semantic-version-violations",
        "missing-version-tags",
        "inconsistent-version-bumps",
        "breaking-changes-without-major-version",
        "backwards-incompatible-minor-versions"
      ],
      "action": "correct-versioning-and-notify",
      "confidence": 0.90
    },
    "commitQualityIssues": {
      "priority": "medium",
      "triggers": [
        "vague-commit-messages",
        "massive-commits-without-logic",
        "commits-without-testing",
        "mixed-concerns-in-commits",
        "missing-issue-references"
      ],
      "action": "improve-commit-quality",
      "confidence": 0.80
    },
    "dependencyVersionIssues": {
      "priority": "medium",
      "triggers": [
        "untracked-dependency-changes",
        "version-conflicts",
        "security-vulnerability-versions",
        "deprecated-version-usage",
        "lockfile-inconsistencies"
      ],
      "action": "resolve-dependency-issues",
      "confidence": 0.85
    }
  },

  "versioningStrategy": {
    "semanticVersioning": {
      "major": "Breaking changes that require user action",
      "minor": "New features that are backwards compatible",
      "patch": "Bug fixes and small improvements",
      "prerelease": "Alpha, beta, and release candidate versions",
      "buildMetadata": "Build information and metadata"
    },
    "branchingModel": {
      "main": "Production-ready code, protected branch",
      "develop": "Integration branch for features",
      "feature": "Feature development branches (feature/feature-name)",
      "release": "Release preparation branches (release/version)",
      "hotfix": "Emergency fixes for production (hotfix/issue-description)"
    },
    "commitConventions": {
      "feat": "New feature additions",
      "fix": "Bug fixes",
      "docs": "Documentation changes",
      "style": "Code style changes (formatting, etc.)",
      "refactor": "Code refactoring without functionality changes",
      "test": "Test additions or modifications",
      "chore": "Maintenance tasks and tooling changes"
    }
  },

  "trackingScopes": {
    "codeChanges": {
      "sourceFiles": "All source code modifications",
      "configurations": "Configuration file changes", 
      "dependencies": "Package and dependency updates",
      "buildScripts": "Build and deployment script changes",
      "tests": "Test file modifications and additions"
    },
    "documentationChanges": {
      "apiDocumentation": "API documentation updates",
      "userGuides": "User guide and manual changes",
      "technicalSpecs": "Technical specification updates",
      "processDocuments": "Process and workflow documentation",
      "changelogMaintenance": "Changelog and release note updates"
    },
    "infrastructureChanges": {
      "deploymentConfigs": "Deployment configuration modifications",
      "environmentSettings": "Environment-specific settings",
      "monitoring": "Monitoring and alerting configurations",
      "security": "Security configuration changes",
      "networking": "Network and connectivity configurations"
    },
    "agentChanges": {
      "agentConfigurations": "Agent configuration modifications",
      "workflowDefinitions": "Workflow and process definitions",
      "qualityGates": "Quality gate and validation rule changes",
      "escalationRules": "Escalation and routing rule updates",
      "learningData": "Agent learning and optimization data"
    }
  },

  "automatedOperations": {
    "commitGeneration": {
      "messageFormatting": "Generate standardized commit messages",
      "metadataInclusion": "Include relevant metadata automatically",
      "issueReferenceLinking": "Link commits to issues and tasks",
      "changesetGrouping": "Group related changes into logical commits",
      "validationChecks": "Validate commits before creation"
    },
    "branchManagement": {
      "branchCreation": "Create branches following naming conventions",
      "mergeManagement": "Handle merges with proper strategies",
      "branchCleanup": "Clean up merged and stale branches",
      "conflictDetection": "Detect and flag merge conflicts",
      "protectionEnforcement": "Enforce branch protection rules"
    },
    "versionBumping": {
      "semanticVersioning": "Calculate appropriate version bumps",
      "tagCreation": "Create version tags with metadata",
      "changelogGeneration": "Generate changelog entries",
      "releaseNotePreperation": "Prepare release notes and documentation",
      "dependencyUpdates": "Track and update dependency versions"
    }
  },

  "qualityGates": {
    "commitQuality": {
      "description": "Commits follow standards and include proper metadata",
      "threshold": 0.90,
      "validation": "commit-message-format-check"
    },
    "branchIntegrity": {
      "description": "Branch strategy is followed and protected branches are safe",
      "threshold": 0.95,
      "validation": "branch-protection-verification"
    },
    "versionConsistency": {
      "description": "Version numbers follow semantic versioning rules",
      "threshold": 0.95,
      "validation": "semantic-version-compliance"
    },
    "changeTraceability": {
      "description": "All changes are properly tracked and documented",
      "threshold": 0.85,
      "validation": "change-documentation-completeness"
    },
    "repositoryHealth": {
      "description": "Repository remains in healthy, consistent state",
      "threshold": 0.90,
      "validation": "repository-integrity-check"
    }
  },

  "outputStructure": {
    "versioningSummary": {
      "currentVersion": "current semantic version",
      "versionBump": "recommended version bump type",
      "changesIncluded": "summary of changes in this version",
      "breakingChanges": "list of breaking changes if any",
      "releaseReadiness": "assessment of release readiness"
    },
    "commitDetails": {
      "commitHash": "git commit hash",
      "commitMessage": "standardized commit message",
      "filesChanged": "list of files modified",
      "linesChanged": "lines added/removed statistics",
      "associatedIssues": "linked issues and tasks"
    },
    "branchStatus": {
      "activeBranches": "list of active development branches",
      "mergeStatus": "pending merges and conflicts",
      "protectionStatus": "branch protection compliance",
      "cleanupRecommendations": "branches recommended for cleanup",
      "branchHealth": "overall branch management health"
    }
  },

  "handoffTriggers": {
    "versionCommitted": {
      "description": "Changes successfully committed with proper versioning",
      "nextAgent": "gatekeeping-agent",
      "confidence": 0.90
    },
    "releaseReady": {
      "description": "Version is ready for release preparation",
      "nextAgent": "deployment-orchestrator",
      "confidence": 0.95
    },
    "versioningIssues": {
      "description": "Version control issues detected requiring attention",
      "nextAgent": "human-interaction-agent",
      "confidence": 0.85
    },
    "conflictDetected": {
      "description": "Merge conflicts or repository issues detected",
      "nextAgent": "human-interaction-agent",
      "confidence": 0.90
    },
    "rollbackRequired": {
      "description": "Changes need to be rolled back due to issues",
      "nextAgent": "human-interaction-agent",
      "confidence": 0.95
    }
  },

  "learningCapabilities": {
    "commitPatternOptimization": "Learn optimal commit patterns for different types of changes",
    "branchingStrategyImprovement": "Optimize branching strategies based on team workflows",
    "versioningAccuracy": "Improve accuracy of semantic version recommendations",
    "conflictPrevention": "Learn to predict and prevent merge conflicts",
    "releaseManagementOptimization": "Optimize release preparation and management processes"
  }
} 