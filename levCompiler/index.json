{
  "systemIndex": {
    "id": "LEVCOMPILER-INDEX-001",
    "version": "1.0.0",
    "description": "AI Agent Orchestration Framework - LLM Entry Point",
    "purpose": "Main entry point for AI agents interacting with the levCompiler system",
    "status": "active"
  },

  "quickStart": {
    "primaryInterfacePoints": [
      {
        "name": "Human Interaction Agent",
        "id": "HUMAN-INTERACT-001",
        "role": "Main counterpart for AI agents",
        "purpose": "Handle complex scenarios and provide guidance"
      },
      {
        "name": "Intelligent Routing Engine",
        "role": "Routes requests to appropriate workflows",
        "confidence_based": true
      },
      {
        "name": "Quality Gate System", 
        "role": "Validates all outputs and decisions",
        "mandatory": true
      }
    ],
    "firstSteps": [
      {
        "step": 1,
        "action": "Check system status",
        "command": "levCompiler monitor status",
        "purpose": "Verify system availability"
      },
      {
        "step": 2,
        "action": "Review project context",
        "command": "levCompiler context review",
        "purpose": "Understand current project state",
        "conditional": "if project context exists"
      },
      {
        "step": 3,
        "action": "Get context-aware help",
        "command": "levCompiler --help",
        "purpose": "Understand available options"
      }
    ]
  },

  "systemNavigation": {
    "coreArchitecture": {
      "file": "SYSTEM_OVERVIEW.md",
      "priority": "read_first",
      "contains": [
        "10 specialized agents and capabilities",
        "5 workflow types for different scenarios", 
        "Quality gate system and escalation paths",
        "Project context management"
      ]
    },
    "agentSpecifications": {
      "directory": "/agents/",
      "structure": {
        "production": "9 core production agents",
        "meta": "2 human-supervised meta agents",
        "readme": "Agent interaction guide"
      },
      "useCase": "Understanding agent capabilities"
    },
    "workflowSystems": {
      "directory": "/workflows/",
      "structure": {
        "project_analysis": "Existing project integration",
        "project_setup": "New project creation", 
        "code_generation": "Code development workflows",
        "visual_development": "Design-to-code workflows",
        "base_io": "Core orchestration pattern"
      },
      "useCase": "Understanding available workflows"
    },
    "controlSystems": {
      "directory": "/.control/",
      "structure": {
        "routing": "Intelligent routing engine",
        "gates": "Quality gate management",
        "orchestration": "Workflow orchestration", 
        "interfaces": "CLI and other interfaces"
      },
      "useCase": "Understanding system internals"
    }
  },

  "interactionPatterns": {
    "pattern1_project_analysis": {
      "name": "New User/Project Analysis",
      "trigger": "User provides project path or description",
      "workflow": "project-analysis-workflow",
      "agentSequence": ["TechStackManager", "HumanInteraction"],
      "output": "Complete project context in project_context/",
      "followUp": "Customization recommendations",
      "confidenceThreshold": 0.90
    },
    "pattern2_code_generation": {
      "name": "Code Generation Request", 
      "trigger": "User requests code implementation",
      "workflow": "code-generation-workflow",
      "agentSequence": ["CodeGeneration", "CodeReviewing", "DryRunTesting", "Gatekeeping"],
      "qualityGates": ["Syntax", "Standards", "Security", "BestPractices"],
      "output": "Production-ready code with documentation",
      "confidenceThreshold": 0.85
    },
    "pattern3_project_setup": {
      "name": "Project Setup",
      "trigger": "User wants new project",
      "workflow": "project-setup-workflow", 
      "agentSequence": ["TechStackManager", "CodeGeneration", "VersionTracking"],
      "output": "Complete project structure with best practices",
      "confidenceThreshold": 0.90
    },
    "pattern4_visual_development": {
      "name": "Visual Development",
      "trigger": "User provides design/mockup",
      "workflow": "visual-development-workflow",
      "agentSequence": ["VisualAnnotation", "CodeGeneration", "CodeReviewing"], 
      "output": "Functional code from visual design",
      "confidenceThreshold": 0.80
    }
  },

  "decisionMatrix": {
    "inputClassification": [
      {
        "inputType": "Project analysis request",
        "confidenceThreshold": 0.90,
        "routeTo": "project-analysis-workflow",
        "escalation": "none"
      },
      {
        "inputType": "Code generation request",
        "confidenceThreshold": 0.85,
        "routeTo": "code-generation-workflow", 
        "escalation": "CodeReviewing"
      },
      {
        "inputType": "Setup new project",
        "confidenceThreshold": 0.90,
        "routeTo": "project-setup-workflow",
        "escalation": "none"
      },
      {
        "inputType": "Visual design input",
        "confidenceThreshold": 0.80,
        "routeTo": "visual-development-workflow",
        "escalation": "HumanInteraction"
      },
      {
        "inputType": "Complex/unclear request", 
        "confidenceThreshold": 0.70,
        "routeTo": "HumanInteraction",
        "escalation": "Human review"
      }
    ],
    "qualityGateThresholds": [
      {
        "gateType": "Security",
        "minimumThreshold": 0.95,
        "escalationPoint": "Security team"
      },
      {
        "gateType": "Syntax",
        "minimumThreshold": 1.0,
        "escalationPoint": "Auto-fix"
      },
      {
        "gateType": "Standards", 
        "minimumThreshold": 0.90,
        "escalationPoint": "CodeReviewing agent"
      },
      {
        "gateType": "Best Practices",
        "minimumThreshold": 0.85,
        "escalationPoint": "Senior review"
      }
    ]
  },

  "commands": {
    "analysis": [
      {
        "command": "levCompiler analyze project <path>",
        "options": ["--scope comprehensive", "--output json|yaml|report", "--include-dependencies", "--security-scan"],
        "purpose": "Comprehensive project analysis"
      },
      {
        "command": "levCompiler analyze tech-stack <path>",
        "options": ["--output-format json|yaml|table"],
        "purpose": "Technology stack analysis only"
      },
      {
        "command": "levCompiler analyze quality <path>",
        "options": ["--metrics complexity,duplication,coverage,security"],
        "purpose": "Code quality and technical debt analysis"
      }
    ],
    "generation": [
      {
        "command": "levCompiler generate component <name>",
        "options": ["--props <props>", "--styled", "--type functional|class|hook|page", "--context-aware"],
        "purpose": "Generate UI components"
      },
      {
        "command": "levCompiler generate api <name>",
        "options": ["--method GET,POST,PUT,DELETE", "--auth"],
        "purpose": "Generate API endpoints"
      },
      {
        "command": "levCompiler generate test <target>",
        "options": ["--coverage <percentage>"],
        "purpose": "Generate test files"
      }
    ],
    "setup": [
      {
        "command": "levCompiler setup project <name>",
        "options": ["--template react|vue|angular|nodejs|python", "--features testing,linting,ci-cd,docker,docs", "--package-manager npm|yarn|pnpm"],
        "purpose": "Create new project from scratch"
      },
      {
        "command": "levCompiler setup config",
        "options": ["--interactive"],
        "purpose": "Setup levCompiler configuration"
      }
    ],
    "visual": [
      {
        "command": "levCompiler visual analyze",
        "options": ["--input <file>", "--output-format json|components|code"],
        "purpose": "Analyze visual designs and mockups"
      },
      {
        "command": "levCompiler visual implement",
        "options": ["--framework react|vue|angular|html", "--responsive"],
        "purpose": "Implement visual designs as code"
      }
    ],
    "context": [
      {
        "command": "levCompiler context review",
        "options": ["--detailed"],
        "purpose": "Review current project context"
      },
      {
        "command": "levCompiler context update",
        "options": ["--force"],
        "purpose": "Update project context"
      },
      {
        "command": "levCompiler context customize",
        "options": ["--agent code-generation|code-review|tech-stack|all", "--threshold <0.1-1.0>"],
        "purpose": "Customize agent configurations"
      }
    ],
    "monitoring": [
      {
        "command": "levCompiler monitor status",
        "options": ["--real-time"],
        "purpose": "Show system status"
      },
      {
        "command": "levCompiler monitor workflows", 
        "options": ["--workflow-id <id>"],
        "purpose": "Monitor active workflows"
      },
      {
        "command": "levCompiler monitor quality",
        "options": ["--time-range 1h|6h|24h|7d|30d"],
        "purpose": "Monitor quality metrics"
      }
    ]
  },

  "projectContextStructure": {
    "profile": {
      "project_metadata.json": "Basic project information",
      "team_conventions.json": "Coding standards and team practices",
      "technology_preferences.json": "Preferred technologies and frameworks"
    },
    "analysis": {
      "tech_stack_analysis.json": "Current technology stack analysis",
      "code_quality_metrics.json": "Quality metrics and measurements", 
      "architecture_analysis.json": "System architecture documentation"
    },
    "patterns": {
      "design_patterns.json": "Preferred design patterns",
      "coding_conventions.json": "Code style guides and conventions",
      "component_patterns.json": "Reusable component patterns"
    },
    "integration": {
      "agent_configurations.json": "Custom agent configurations",
      "workflow_preferences.json": "Workflow customizations",
      "quality_thresholds.json": "Project-specific quality standards"
    },
    "improvements": {
      "recommendations.json": "Improvement suggestions",
      "optimization_plan.json": "Performance optimization plans",
      "integration_roadmap.json": "Integration timeline and milestones"
    }
  },

  "guidelines": {
    "alwaysCheckFirst": [
      {
        "item": "Project Context",
        "action": "Look for project_context/ directory",
        "importance": "critical"
      },
      {
        "item": "System Status", 
        "action": "Verify all agents are available",
        "importance": "critical"
      },
      {
        "item": "Quality Requirements",
        "action": "Check project-specific thresholds",
        "importance": "high"
      },
      {
        "item": "User Preferences",
        "action": "Review team conventions and preferences", 
        "importance": "medium"
      }
    ],
    "qualityStandards": [
      {
        "rule": "Never skip quality gates",
        "reason": "They ensure consistent output quality",
        "enforcement": "mandatory"
      },
      {
        "rule": "Always provide context",
        "reason": "Include reasoning for decisions",
        "enforcement": "mandatory"
      },
      {
        "rule": "Escalate when uncertain",
        "reason": "Use human interaction for ambiguous cases", 
        "enforcement": "recommended"
      },
      {
        "rule": "Document decisions",
        "reason": "Maintain audit trail for all actions",
        "enforcement": "mandatory"
      }
    ],
    "errorHandling": [
      {
        "principle": "Graceful degradation",
        "description": "Provide best possible output even with limitations"
      },
      {
        "principle": "Clear communication",
        "description": "Explain what you can/cannot do"
      },
      {
        "principle": "Proactive escalation", 
        "description": "Route to human interaction before failing"
      },
      {
        "principle": "State preservation",
        "description": "Maintain context through handoffs"
      }
    ]
  },

  "troubleshooting": {
    "agentNotResponding": {
      "steps": [
        {
          "step": 1,
          "action": "Check agent availability",
          "command": "levCompiler monitor agents"
        },
        {
          "step": 2,
          "action": "Verify system status",
          "command": "levCompiler monitor status"
        },
        {
          "step": 3,
          "action": "Escalate to human interaction if persistent",
          "condition": "if previous steps fail"
        }
      ]
    },
    "qualityGateFailure": {
      "steps": [
        {
          "step": 1,
          "action": "Review specific gate failure",
          "details": "Check validation results"
        },
        {
          "step": 2,
          "action": "Apply automatic fixes if available",
          "condition": "if automated fix exists"
        },
        {
          "step": 3,
          "action": "Request human review for subjective issues", 
          "condition": "if manual review needed"
        },
        {
          "step": 4,
          "action": "Document lessons learned",
          "purpose": "Improve future handling"
        }
      ]
    },
    "unclearUserInput": {
      "steps": [
        {
          "step": 1,
          "action": "Use intelligent routing confidence scoring",
          "threshold": "< 0.70 triggers uncertainty handling"
        },
        {
          "step": 2,
          "action": "Engage human interaction if confidence low",
          "condition": "confidence < 0.70"
        },
        {
          "step": 3,
          "action": "Ask clarifying questions before proceeding",
          "approach": "Provide specific options when possible"
        }
      ]
    },
    "contextMissing": {
      "steps": [
        {
          "step": 1,
          "action": "Check for project_context/ directory",
          "purpose": "Verify context availability"
        },
        {
          "step": 2,
          "action": "Suggest context generation if missing",
          "command": "levCompiler analyze project",
          "condition": "if no context found"
        },
        {
          "step": 3,
          "action": "Use system defaults while recommending context generation",
          "fallback": true
        }
      ]
    }
  },

  "successMetrics": {
    "operationalExcellence": {
      "routingAccuracy": {
        "target": "> 95%",
        "metric": "percentage of correct workflow selections"
      },
      "qualityGatePassRate": {
        "target": "> 90%", 
        "metric": "first-time quality gate passage"
      },
      "firstTimeResolution": {
        "target": "> 85%",
        "metric": "issues resolved without escalation"
      },
      "userSatisfaction": {
        "target": "> 4.5/5",
        "metric": "user feedback scores"
      }
    },
    "qualityMeasures": {
      "codeQualityImprovement": {
        "target": "consistently improving",
        "metric": "code quality scores over time"
      },
      "securityViolations": {
        "target": "< 1%",
        "metric": "security gate failures"
      },
      "performanceOptimizations": {
        "target": "applied",
        "metric": "optimization recommendations implemented"
      },
      "bestPracticesAdherence": {
        "target": "> 90%",
        "metric": "best practices compliance rate"
      }
    }
  },

  "startupChecklist": [
    {
      "task": "Read SYSTEM_OVERVIEW.md for complete understanding",
      "priority": "critical",
      "completed": false
    },
    {
      "task": "Check system status and agent availability", 
      "priority": "critical",
      "completed": false
    },
    {
      "task": "Identify if project context exists",
      "priority": "high",
      "completed": false
    },
    {
      "task": "Understand user's primary intent",
      "priority": "high", 
      "completed": false
    },
    {
      "task": "Route to appropriate workflow with confidence scoring",
      "priority": "high",
      "completed": false
    },
    {
      "task": "Apply quality gates throughout process",
      "priority": "mandatory",
      "completed": false
    },
    {
      "task": "Maintain clear communication with user",
      "priority": "high",
      "completed": false
    },
    {
      "task": "Document all decisions and actions", 
      "priority": "mandatory",
      "completed": false
    },
    {
      "task": "Escalate appropriately when needed",
      "priority": "high",
      "completed": false
    },
    {
      "task": "Provide actionable outputs",
      "priority": "high",
      "completed": false
    }
  ],

  "helpResources": {
    "systemDocumentation": {
      "file": "SYSTEM_OVERVIEW.md",
      "purpose": "Complete system understanding"
    },
    "agentSpecifications": {
      "file": "/agents/README.md", 
      "purpose": "Individual agent capabilities"
    },
    "workflowDetails": {
      "directory": "/workflows/",
      "purpose": "Workflow implementations"
    },
    "qualityGates": {
      "file": "/.control/gates/quality_gate_system.json",
      "purpose": "Quality gate configurations"
    },
    "routingLogic": {
      "file": "/.control/routing/intelligent_routing_engine.json",
      "purpose": "Routing decision algorithms"
    },
    "emergencyEscalation": {
      "agent": "Human Interaction Agent",
      "purpose": "Handle complex scenarios and provide guidance",
      "when": "When in doubt or facing uncertainty"
    }
  },

  "systemStatus": {
    "currentVersion": "1.0.0",
    "operationalMode": "active",
    "lastHealthCheck": null,
    "availableAgents": null,
    "activeWorkflows": null,
    "systemLoad": null,
    "note": "Use 'levCompiler monitor status' for real-time information"
  }
} 